package ML;

import matrix.impl.DenseDoubleMatrix2D;
import org.junit.Before;
import org.junit.Test;

public class NaiveBayesTest {

    @Before
    public void setUp() throws Exception {
    }

    @Test
    public void fit() throws Exception {
        NaiveBayes naiveBayes = new NaiveBayes(0.8);
        naiveBayes = (NaiveBayes) naiveBayes.fit(new DenseDoubleMatrix2D(new double[][]{
                {5.9, 3.0, 4.2, 1.5,},
                {5.8, 2.6, 4.0, 1.2,},
                {6.8, 3.0, 5.5, 2.1,},
                {4.7, 3.2, 1.3, 0.2,},
                {6.9, 3.1, 5.1, 2.3,},
                {5.0, 3.5, 1.6, 0.6,},
                {5.4, 3.7, 1.5, 0.2,},
                {5.0, 2.0, 3.5, 1.0,},
                {6.5, 3.0, 5.5, 1.8,},
                {6.7, 3.3, 5.7, 2.5,},
                {6.0, 2.2, 5.0, 1.5,},
                {6.7, 2.5, 5.8, 1.8,},
                {5.6, 2.5, 3.9, 1.1,},
                {7.7, 3.0, 6.1, 2.3,},
                {6.3, 3.3, 4.7, 1.6,},
                {5.5, 2.4, 3.8, 1.1,},
                {6.3, 2.7, 4.9, 1.8,},
                {6.3, 2.8, 5.1, 1.5,},
                {4.9, 2.5, 4.5, 1.7,},
                {6.3, 2.5, 5.0, 1.9,},
                {7.0, 3.2, 4.7, 1.4,},
                {6.5, 3.0, 5.2, 2.0,},
                {6.0, 3.4, 4.5, 1.6,},
                {4.8, 3.1, 1.6, 0.2,},
                {5.8, 2.7, 5.1, 1.9,},
                {5.6, 2.7, 4.2, 1.3,},
                {5.6, 2.9, 3.6, 1.3,},
                {5.5, 2.5, 4.0, 1.3,},
                {6.1, 3.0, 4.6, 1.4,},
                {7.2, 3.2, 6.0, 1.8,},
                {5.3, 3.7, 1.5, 0.2,},
                {4.3, 3.0, 1.1, 0.1,},
                {6.4, 2.7, 5.3, 1.9,},
                {5.7, 3.0, 4.2, 1.2,},
                {5.4, 3.4, 1.7, 0.2,},
                {5.7, 4.4, 1.5, 0.4,},
                {6.9, 3.1, 4.9, 1.5,},
                {4.6, 3.1, 1.5, 0.2,},
                {5.9, 3.0, 5.1, 1.8,},
                {5.1, 2.5, 3.0, 1.1,},
                {4.6, 3.4, 1.4, 0.3,},
                {6.2, 2.2, 4.5, 1.5,},
                {7.2, 3.6, 6.1, 2.5,},
                {5.7, 2.9, 4.2, 1.3,},
                {4.8, 3.0, 1.4, 0.1,},
                {7.1, 3.0, 5.9, 2.1,},
                {6.9, 3.2, 5.7, 2.3,},
                {6.5, 3.0, 5.8, 2.2,},
                {6.4, 2.8, 5.6, 2.1,},
                {5.1, 3.8, 1.6, 0.2,},
                {4.8, 3.4, 1.6, 0.2,},
                {6.5, 3.2, 5.1, 2.0,},
                {6.7, 3.3, 5.7, 2.1,},
                {4.5, 2.3, 1.3, 0.3,},
                {6.2, 3.4, 5.4, 2.3,},
                {4.9, 3.0, 1.4, 0.2,},
                {5.7, 2.5, 5.0, 2.0,},
                {6.9, 3.1, 5.4, 2.1,},
                {4.4, 3.2, 1.3, 0.2,},
                {5.0, 3.6, 1.4, 0.2,},
                {7.2, 3.0, 5.8, 1.6,},
                {5.1, 3.5, 1.4, 0.3,},
                {4.4, 3.0, 1.3, 0.2,},
                {5.4, 3.9, 1.7, 0.4,},
                {5.5, 2.3, 4.0, 1.3,},
                {6.8, 3.2, 5.9, 2.3,},
                {7.6, 3.0, 6.6, 2.1,},
                {5.1, 3.5, 1.4, 0.2,},
                {4.9, 3.1, 1.5, 0.2,},
                {5.2, 3.4, 1.4, 0.2,},
                {5.7, 2.8, 4.5, 1.3,},
                {6.6, 3.0, 4.4, 1.4,},
                {5.0, 3.2, 1.2, 0.2,},
                {5.1, 3.3, 1.7, 0.5,},
                {6.4, 2.9, 4.3, 1.3,},
                {5.4, 3.4, 1.5, 0.4,},
                {7.7, 2.6, 6.9, 2.3,},
                {4.9, 2.4, 3.3, 1.0,},
                {7.9, 3.8, 6.4, 2.0,},
                {6.7, 3.1, 4.4, 1.4,},
                {5.2, 4.1, 1.5, 0.1,},
                {6.0, 3.0, 4.8, 1.8,},
                {5.8, 4.0, 1.2, 0.2,},
                {7.7, 2.8, 6.7, 2.0,},
                {5.1, 3.8, 1.5, 0.3,},
                {4.7, 3.2, 1.6, 0.2,},
                {7.4, 2.8, 6.1, 1.9,},
                {5.0, 3.3, 1.4, 0.2,},
                {6.3, 3.4, 5.6, 2.4,},
                {5.7, 2.8, 4.1, 1.3,},
                {5.8, 2.7, 3.9, 1.2,},
                {5.7, 2.6, 3.5, 1.0,},
                {6.4, 3.2, 5.3, 2.3,},
                {6.7, 3.0, 5.2, 2.3,},
                {6.3, 2.5, 4.9, 1.5,},
                {6.7, 3.0, 5.0, 1.7,},
                {5.0, 3.0, 1.6, 0.2,},
                {5.5, 2.4, 3.7, 1.0,},
                {6.7, 3.1, 5.6, 2.4,},
                {5.8, 2.7, 5.1, 1.9,},
                {5.1, 3.4, 1.5, 0.2,},
                {6.6, 2.9, 4.6, 1.3,},
                {5.6, 3.0, 4.1, 1.3,},
                {5.9, 3.2, 4.8, 1.8,},
                {6.3, 2.3, 4.4, 1.3,},
                {5.5, 3.5, 1.3, 0.2,},
                {5.1, 3.7, 1.5, 0.4,},
                {4.9, 3.1, 1.5, 0.1,},
                {6.3, 2.9, 5.6, 1.8,},
                {5.8, 2.7, 4.1, 1.0,},
                {7.7, 3.8, 6.7, 2.2,},
                {4.6, 3.2, 1.4, 0.2,},
        }), new DenseDoubleMatrix2D(new double[][]{{1, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 0, 2, 1, 1, 1, 1, 2, 0, 0, 2, 1, 0, 0, 1, 0, 2, 1, 0, 1, 2, 1, 0, 2, 2, 2, 2, 0, 0, 2, 2, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0, 1, 2, 2, 0, 0, 0, 1, 1, 0, 0, 1, 0, 2, 1, 2, 1, 0, 2, 0, 2, 0, 0, 2, 0, 2, 1, 1, 1, 2, 2, 1, 1, 0, 1, 2, 2, 0, 1, 1, 1, 1, 0, 0, 0, 2, 1, 2, 0}}));
        naiveBayes.predict(new DenseDoubleMatrix2D(new double[][]{
                {5.8, 2.8, 5.1, 2.4}
        }));
        double res = naiveBayes.score(new DenseDoubleMatrix2D(new double[][]{
                {5.8, 2.8, 5.1, 2.4,},
                {6.0, 2.2, 4.0, 1.0,},
                {5.5, 4.2, 1.4, 0.2,},
                {7.3, 2.9, 6.3, 1.8,},
                {5.0, 3.4, 1.5, 0.2,},
                {6.3, 3.3, 6.0, 2.5,},
                {5.0, 3.5, 1.3, 0.3,},
                {6.7, 3.1, 4.7, 1.5,},
                {6.8, 2.8, 4.8, 1.4,},
                {6.1, 2.8, 4.0, 1.3,},
                {6.1, 2.6, 5.6, 1.4,},
                {6.4, 3.2, 4.5, 1.5,},
                {6.1, 2.8, 4.7, 1.2,},
                {6.5, 2.8, 4.6, 1.5,},
                {6.1, 2.9, 4.7, 1.4,},
                {4.9, 3.6, 1.4, 0.1,},
                {6.0, 2.9, 4.5, 1.5,},
                {5.5, 2.6, 4.4, 1.2,},
                {4.8, 3.0, 1.4, 0.3,},
                {5.4, 3.9, 1.3, 0.4,},
                {5.6, 2.8, 4.9, 2.0,},
                {5.6, 3.0, 4.5, 1.5,},
                {4.8, 3.4, 1.9, 0.2,},
                {4.4, 2.9, 1.4, 0.2,},
                {6.2, 2.8, 4.8, 1.8,},
                {4.6, 3.6, 1.0, 0.2,},
                {5.1, 3.8, 1.9, 0.4,},
                {6.2, 2.9, 4.3, 1.3,},
                {5.0, 2.3, 3.3, 1.0,},
                {5.0, 3.4, 1.6, 0.4,},
                {6.4, 3.1, 5.5, 1.8,},
                {5.4, 3.0, 4.5, 1.5,},
                {5.2, 3.5, 1.5, 0.2,},
                {6.1, 3.0, 4.9, 1.8,},
                {6.4, 2.8, 5.6, 2.2,},
                {5.2, 2.7, 3.9, 1.4,},
                {5.7, 3.8, 1.7, 0.3,},
                {6.0, 2.7, 5.1, 1.6,}
        }), new DenseDoubleMatrix2D(new double[][]{
                {2, 1, 0, 2, 0, 2, 0, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 2, 1, 0, 0, 2, 0, 0, 1, 1, 0, 2, 1, 0, 2, 2, 1, 0, 1,}
        }));
        System.out.println(res);
    }

    @Test
    public void predict() {
    }

    @Test
    public void score() {
        /**
         * 5.8	0.6285714285714286
         * 2.8	0.8285714285714286
         * 5.1	0.2
         * 2.4	0.02857142857142857
         * 5.8	0.19047619047619047
         * 2.8	0.8095238095238095
         * 5.1	0.47619047619047616
         * 2.4	0.6190476190476191
         * 5.8	0.21052631578947367
         * 2.8	0.39473684210526316
         * 5.1	0.02631578947368421
         * 2.4	0.02631578947368421
         * [5.755020296038244E-5, 0.0, 0.0]
         * 0.0
         *
         * Process finished with exit code 0
         */

        /**
         * 5.8	0.6176470588235294
         * 2.8	0.8235294117647058
         * 5.1	0.17647058823529413
         * 2.4	0.0
         * 5.8	0.17073170731707318
         * 2.8	0.8048780487804879
         * 5.1	0.4634146341463415
         * 2.4	0.6097560975609756
         * 5.8	0.1891891891891892
         * 2.8	0.3783783783783784
         * 5.1	0.0
         * 2.4	0.0
         * [0.0, 0.0, 0.0]
         * 0.0
         *
         * Process finished with exit code 0
         */
    }
}